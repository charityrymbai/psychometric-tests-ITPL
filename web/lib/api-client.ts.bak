"use client";

/**
 * API client for interacting with the backend
 */

const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || process.env.NEXT_PUBLIC_BACKEND_BASE_URL || 'http://localhost:3001/api';

// For direct server access (not going through the API gateway)
// This is used for direct updates in some components
export const DIRECT_SERVER_URL = process.env.NEXT_PUBLIC_DIRECT_SERVER_URL || 'http://localhost:3002';

/**
 * Fetch wrapper with standard error handling
 */
async function fetchWithErrorHandling(url: string, options: RequestInit = {}) {
  try {
    console.log(`Making API request to: ${url}`);
    
    const response = await fetch(url, {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    });

    if (!response.ok) {
      try {
        const errorData = await response.json();
        console.error('Error response body:', errorData);
        throw new Error(errorData.error || `API request failed with status ${response.status}`);
      } catch (jsonError) {
        // If response is not JSON, just use status text
        throw new Error(`API request failed with status ${response.status}: ${response.statusText}`);
      }
    }

    const responseData = await response.json();
    console.log('Response data:', JSON.stringify(responseData));
    return responseData;
  } catch (error) {
    console.error('API request failed:', error);
    // Add more details to the error for better debugging
    if (error instanceof TypeError && error.message === 'Failed to fetch') {
      console.error('Network error: This might be due to CORS issues, the server being down, or incorrect API URL');
      console.error('API_BASE_URL is:', API_BASE_URL);
    }
    throw error;
  }
}

// Helper function to handle direct server requests
async function makeDirectServerRequest(url: string, options: RequestInit = {}) {
  console.log(`Making direct server request to: ${url}`);
  
  const response = await fetch(url, {
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
  
  if (!response.ok) {
    throw new Error(`Direct server request failed with status ${response.status}`);
  }
  
  let result;
  try {
    const textResponse = await response.text();
    console.log('Raw text response:', textResponse);
    
    try {
      result = JSON.parse(textResponse);
      console.log('Parsed JSON response:', result);
    } catch (jsonError) {
      console.error('Failed to parse response as JSON:', jsonError);
      // Return the text as a fallback
      result = { responseText: textResponse };
    }
  } catch (textError) {
    console.error('Failed to get response text:', textError);
    throw new Error('Failed to read server response');
  }
  
  return result;
}

/**
 * User API methods
 */
export const userApi = {
  // Create a new user
  createUser: async (tempId: string, userData: { name: string, class: number }) => {
    console.log('Creating user with tempId:', tempId, 'and data:', userData);
    
    try {
      // Try the plural endpoint first as it's more common in REST APIs
      try {
        const response = await fetchWithErrorHandling(`${API_BASE_URL}/users/${tempId}`, {
          method: 'POST',
          body: JSON.stringify(userData),
        });
        console.log('User created successfully with /users endpoint:', response);
        return response;
      } catch (error) {
        console.log('Failed with /users endpoint, trying /user...');
        const response = await fetchWithErrorHandling(`${API_BASE_URL}/user/${tempId}`, {
          method: 'POST',
          body: JSON.stringify(userData),
        });
        console.log('User created successfully with /user endpoint:', response);
        return response;
      }
    } catch (error) {
      // Try the direct server as a last resort
      console.log('Both API endpoints failed, trying direct server...');
      try {
        const result = await makeDirectServerRequest(`${DIRECT_SERVER_URL}/user/${tempId}`, {
          method: 'POST',
          body: JSON.stringify(userData),
        });
          
          console.log('User created successfully with direct server:', result);
          
          // Standardize the response format
          // If the server returned { user_id: "1" } but not { id: "1" }, add the id property
          if (result.user_id && !result.id) {
            result.id = result.user_id;
          }
          
          return result;
        } catch (directError) {
          console.error('All user creation attempts failed:', directError);
          throw error; // Throw the original error to maintain existing error handling
        }
      }
    }
  },

  // Get user by ID
  getUser: async (userId: string) => {
    // Fast path for temporary users - don't even try to hit the API
    if (userId.startsWith('temp_')) {
      console.log('Temporary user ID detected, skipping API calls');
      throw new Error(`Temporary user ID: ${userId}`);
    }
    
    try {
      try {
        return await fetchWithErrorHandling(`${API_BASE_URL}/users/${userId}`);
      } catch (error) {
        console.log('Failed with /users endpoint, trying /user...');
        return await fetchWithErrorHandling(`${API_BASE_URL}/user/${userId}`);
      }
    } catch (error) {
      // Third attempt: try direct server URL if API gateway is failing
      console.log('Both API endpoints failed, trying direct server...');
      try {
        const result = await makeDirectServerRequest(`${DIRECT_SERVER_URL}/user/${userId}`);
        return result;
      } catch (directError) {
        console.error('All user fetch attempts failed:', directError);
        throw error; // Throw the original error to maintain existing error handling
      }
    }
  },

  // Update user by ID
  updateUser: async (userId: string, userData: { name?: string, class?: number }) => {
    try {
      return await fetchWithErrorHandling(`${API_BASE_URL}/users/${userId}`, {
        method: 'PUT',
        body: JSON.stringify(userData),
      });
    } catch (error) {
      console.log('Failed with /users endpoint, trying /user...');
      return fetchWithErrorHandling(`${API_BASE_URL}/user/${userId}`, {
        method: 'PUT',
        body: JSON.stringify(userData),
      });
    }
  },

  // Delete user by ID
  deleteUser: async (userId: string) => {
    try {
      return await fetchWithErrorHandling(`${API_BASE_URL}/users/${userId}`, {
        method: 'DELETE',
      });
    } catch (error) {
      console.log('Failed with /users endpoint, trying /user...');
      return fetchWithErrorHandling(`${API_BASE_URL}/user/${userId}`, {
        method: 'DELETE',
      });
    }
  },
};
